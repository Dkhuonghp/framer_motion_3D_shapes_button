{"ast":null,"code":"import { __spreadArray, __read, __assign } from 'tslib';\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nvar animationTarget = 1000;\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\n\nvar globalProjectionState = {\n  /**\n   * Global flag as to whether the tree has animated since the last time\n   * we resized the window\n   */\n  hasAnimatedSinceResize: true,\n\n  /**\n   * We set this to true once, on the first update. Any nodes added to the tree beyond that\n   * update will be given a `data-projection-id` attribute.\n   */\n  hasEverUpdated: false\n};\n\nfunction createProjectionNode(_a) {\n  var attachResizeListener = _a.attachResizeListener,\n      defaultParent = _a.defaultParent,\n      measureScroll = _a.measureScroll,\n      resetTransform = _a.resetTransform;\n  return (\n    /** @class */\n    function () {\n      function ProjectionNode(id, latestValues, parent) {\n        var _this = this;\n\n        if (latestValues === void 0) {\n          latestValues = {};\n        }\n\n        if (parent === void 0) {\n          parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n        }\n        /**\n         * A Set containing all this component's children. This is used to iterate\n         * through the children.\n         *\n         * TODO: This could be faster to iterate as a flat array stored on the root node.\n         */\n\n\n        this.children = new Set();\n        /**\n         * Options for the node. We use this to configure what kind of layout animations\n         * we should perform (if any).\n         */\n\n        this.options = {};\n        /**\n         * We use this to detect when its safe to shut down part of a projection tree.\n         * We have to keep projecting children for scale correction and relative projection\n         * until all their parents stop performing layout animations.\n         */\n\n        this.isTreeAnimating = false;\n        this.isAnimationBlocked = false;\n        /**\n         * Flag to true if we think this layout has been changed. We can't always know this,\n         * currently we set it to true every time a component renders, or if it has a layoutDependency\n         * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n         * and if one node is dirtied, they all are.\n         */\n\n        this.isLayoutDirty = false;\n        /**\n         * Block layout updates for instant layout transitions throughout the tree.\n         */\n\n        this.updateManuallyBlocked = false;\n        this.updateBlockedByResize = false;\n        /**\n         * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n         * call.\n         */\n\n        this.isUpdating = false;\n        /**\n         * If this is an SVG element we currently disable projection transforms\n         */\n\n        this.isSVG = false;\n        /**\n         * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n         * its projection styles.\n         */\n\n        this.needsReset = false;\n        /**\n         * Flags whether this node should have its transform reset prior to measuring.\n         */\n\n        this.shouldResetTransform = false;\n        /**\n         * An object representing the calculated contextual/accumulated/tree scale.\n         * This will be used to scale calculcated projection transforms, as these are\n         * calculated in screen-space but need to be scaled for elements to actually\n         * make it to their calculated destinations.\n         *\n         * TODO: Lazy-init\n         */\n\n        this.treeScale = {\n          x: 1,\n          y: 1\n        };\n        /**\n         *\n         */\n\n        this.eventHandlers = new Map(); // Note: Currently only running on root node\n\n        this.potentialNodes = new Map();\n\n        this.checkUpdateFailed = function () {\n          if (_this.isUpdating) {\n            _this.isUpdating = false;\n\n            _this.clearAllSnapshots();\n          }\n        };\n\n        this.updateProjection = function () {\n          _this.nodes.forEach(resolveTargetDelta);\n\n          _this.nodes.forEach(calcProjection);\n        };\n\n        this.hasProjected = false;\n        this.isVisible = true;\n        /**\n         * Animation\n         */\n\n        this.animationProgress = 0;\n        /**\n         * Shared layout\n         */\n        // TODO Only running on root node\n\n        this.sharedNodes = new Map();\n        this.id = id;\n        this.latestValues = latestValues;\n        this.root = parent ? parent.root || parent : this;\n        this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];\n        this.parent = parent;\n        this.depth = parent ? parent.depth + 1 : 0;\n        id && this.root.registerPotentialNode(id, this);\n\n        for (var i = 0; i < this.path.length; i++) {\n          this.path[i].shouldResetTransform = true;\n        }\n\n        if (this.root === this) this.nodes = new FlatTree();\n      }\n\n      ProjectionNode.prototype.addEventListener = function (name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n\n        return this.eventHandlers.get(name).add(handler);\n      };\n\n      ProjectionNode.prototype.notifyListeners = function (name) {\n        var args = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n\n        var subscriptionManager = this.eventHandlers.get(name);\n        subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));\n      };\n\n      ProjectionNode.prototype.hasListeners = function (name) {\n        return this.eventHandlers.has(name);\n      };\n\n      ProjectionNode.prototype.registerPotentialNode = function (id, node) {\n        this.potentialNodes.set(id, node);\n      };\n      /**\n       * Lifecycles\n       */\n\n\n      ProjectionNode.prototype.mount = function (instance, isLayoutDirty) {\n        var _this = this;\n\n        var _a;\n\n        if (isLayoutDirty === void 0) {\n          isLayoutDirty = false;\n        }\n\n        if (this.instance) return;\n        this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n        this.instance = instance;\n        var _b = this.options,\n            layoutId = _b.layoutId,\n            layout = _b.layout,\n            visualElement = _b.visualElement;\n\n        if (visualElement && !visualElement.getInstance()) {\n          visualElement.mount(instance);\n        }\n\n        this.root.nodes.add(this);\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n        this.id && this.root.potentialNodes.delete(this.id);\n\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n\n        if (attachResizeListener) {\n          var unblockTimeout_1;\n\n          var resizeUnblockUpdate_1 = function resizeUnblockUpdate_1() {\n            return _this.root.updateBlockedByResize = false;\n          };\n\n          attachResizeListener(instance, function () {\n            _this.root.updateBlockedByResize = true;\n            clearTimeout(unblockTimeout_1);\n            unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);\n\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n\n              _this.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        } // Only register the handler if it requires layout animation\n\n\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_a) {\n            var _b, _c, _d, _e, _f;\n\n            var delta = _a.delta,\n                hasLayoutChanged = _a.hasLayoutChanged,\n                hasRelativeTargetChanged = _a.hasRelativeTargetChanged,\n                newLayout = _a.layout;\n\n            if (_this.isTreeAnimationBlocked()) {\n              _this.target = undefined;\n              _this.relativeTarget = undefined;\n              return;\n            } // TODO: Check here if an animation exists\n\n\n            var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n            var onLayoutAnimationComplete = visualElement.getProps().onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n\n            var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n            if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {\n              if (_this.resumeFrom) {\n                _this.resumingFrom = _this.resumeFrom;\n                _this.resumingFrom.resumingFrom = undefined;\n              }\n\n              _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n\n              _this.startAnimation(__assign(__assign({}, getValueTransition(layoutTransition, \"layout\")), {\n                onComplete: onLayoutAnimationComplete\n              }));\n            } else {\n              _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n            }\n\n            _this.targetLayout = newLayout;\n          });\n        }\n      };\n\n      ProjectionNode.prototype.unmount = function () {\n        var _a, _b;\n\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n        (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n        this.instance = undefined;\n        cancelSync.preRender(this.updateProjection);\n      }; // only on the root\n\n\n      ProjectionNode.prototype.blockUpdate = function () {\n        this.updateManuallyBlocked = true;\n      };\n\n      ProjectionNode.prototype.unblockUpdate = function () {\n        this.updateManuallyBlocked = false;\n      };\n\n      ProjectionNode.prototype.isUpdateBlocked = function () {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      };\n\n      ProjectionNode.prototype.isTreeAnimationBlocked = function () {\n        var _a;\n\n        return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n      }; // Note: currently only running on root node\n\n\n      ProjectionNode.prototype.startUpdate = function () {\n        var _a;\n\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n      };\n\n      ProjectionNode.prototype.willUpdate = function (shouldNotifyListeners) {\n        var _a, _b, _c;\n\n        if (shouldNotifyListeners === void 0) {\n          shouldNotifyListeners = true;\n        }\n\n        if (this.root.isUpdateBlocked()) {\n          (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n          return;\n        }\n\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          /**\n           * TODO: Check we haven't updated the scroll\n           * since the last didUpdate\n           */\n\n          node.updateScroll();\n        }\n\n        var _d = this.options,\n            layoutId = _d.layoutId,\n            layout = _d.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n        this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      }; // Note: Currently only running on root node\n\n\n      ProjectionNode.prototype.didUpdate = function () {\n        var updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n\n        if (!this.isUpdating) return;\n        this.isUpdating = false;\n        /**\n         * Search for and mount newly-added projection elements.\n         *\n         * TODO: Every time a new component is rendered we could search up the tree for\n         * the closest mounted node and query from there rather than document.\n         */\n\n        if (this.potentialNodes.size) {\n          this.potentialNodes.forEach(mountNodeEarly);\n          this.potentialNodes.clear();\n        }\n        /**\n         * Write\n         */\n\n\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots(); // Flush any scheduled updates\n\n        flushSync.update();\n        flushSync.preRender();\n        flushSync.render();\n      };\n\n      ProjectionNode.prototype.clearAllSnapshots = function () {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      };\n\n      ProjectionNode.prototype.scheduleUpdateProjection = function () {\n        sync.preRender(this.updateProjection, false, true);\n      };\n\n      ProjectionNode.prototype.scheduleCheckAfterUnmount = function () {\n        var _this = this;\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n\n\n        sync.postRender(function () {\n          if (_this.isLayoutDirty) {\n            _this.root.didUpdate();\n          } else {\n            _this.root.checkUpdateFailed();\n          }\n        });\n      };\n      /**\n       * Update measurements\n       */\n\n\n      ProjectionNode.prototype.updateSnapshot = function () {\n        if (this.snapshot || !this.instance) return;\n        var measured = this.measure();\n        var layout = this.removeTransform(this.removeElementScroll(measured));\n        roundBox(layout);\n        this.snapshot = {\n          measured: measured,\n          layout: layout,\n          latestValues: {}\n        };\n      };\n\n      ProjectionNode.prototype.updateLayout = function () {\n        var _a;\n\n        if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n        this.updateScroll();\n\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n\n\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n\n        var measured = this.measure();\n        roundBox(measured);\n        var prevLayout = this.layout;\n        this.layout = {\n          measured: measured,\n          actual: this.removeElementScroll(measured)\n        };\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.actual);\n        (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n      };\n\n      ProjectionNode.prototype.updateScroll = function () {\n        if (this.options.layoutScroll && this.instance) {\n          this.scroll = measureScroll(this.instance);\n        }\n      };\n\n      ProjectionNode.prototype.resetTransform = function () {\n        var _a;\n\n        if (!resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n        var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          resetTransform(this.instance, transformTemplateValue);\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      };\n\n      ProjectionNode.prototype.measure = function () {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n        var scroll = this.root.scroll;\n\n        if (scroll) {\n          translateAxis(box.x, scroll.x);\n          translateAxis(box.y, scroll.y);\n        }\n\n        return box;\n      };\n\n      ProjectionNode.prototype.removeElementScroll = function (box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll_1 = node.scroll,\n              options = node.options;\n\n          if (node !== this.root && scroll_1 && options.layoutScroll) {\n            translateAxis(boxWithoutScroll.x, scroll_1.x);\n            translateAxis(boxWithoutScroll.y, scroll_1.y);\n          }\n        }\n\n        return boxWithoutScroll;\n      };\n\n      ProjectionNode.prototype.applyTransform = function (box, transformOnly) {\n        if (transformOnly === void 0) {\n          transformOnly = false;\n        }\n\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.x,\n              y: -node.scroll.y\n            });\n          }\n\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n\n        return withTransforms;\n      };\n\n      ProjectionNode.prototype.removeTransform = function (box) {\n        var _a;\n\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measure();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n        }\n\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n\n        return boxWithoutTransform;\n      };\n      /**\n       *\n       */\n\n\n      ProjectionNode.prototype.setTargetDelta = function (delta) {\n        this.targetDelta = delta;\n        this.root.scheduleUpdateProjection();\n      };\n\n      ProjectionNode.prototype.setOptions = function (options) {\n        var _a;\n\n        this.options = __assign(__assign(__assign({}, this.options), options), {\n          crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true\n        });\n      };\n\n      ProjectionNode.prototype.clearMeasurements = function () {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      };\n      /**\n       * Frame calculations\n       */\n\n\n      ProjectionNode.prototype.resolveTargetDelta = function () {\n        var _a;\n\n        var _b = this.options,\n            layout = _b.layout,\n            layoutId = _b.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        // TODO If this is unsuccessful this currently happens every frame\n\n        if (!this.targetDelta && !this.relativeTarget) {\n          // TODO: This is a semi-repetition of further down this function, make DRY\n          this.relativeParent = this.getClosestProjectingParent();\n\n          if (this.relativeParent && this.relativeParent.layout) {\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n\n\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n\n\n        if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.actual);\n          } else {\n            copyBoxInto(this.target, this.layout.actual);\n          }\n\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.actual);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n\n\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          this.relativeParent = this.getClosestProjectingParent();\n\n          if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          }\n        }\n      };\n\n      ProjectionNode.prototype.getClosestProjectingParent = function () {\n        if (!this.parent || hasTransform(this.parent.latestValues)) return undefined;\n\n        if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      };\n\n      ProjectionNode.prototype.calcProjection = function () {\n        var _a;\n\n        var _b = this.options,\n            layout = _b.layout,\n            layoutId = _b.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n\n        this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n\n        if (!this.layout || !(layout || layoutId)) return;\n        var lead = this.getLead();\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n\n        copyBoxInto(this.layoutCorrected, this.layout.actual);\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n        var target = lead.target;\n        if (!target) return;\n\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n      };\n\n      ProjectionNode.prototype.hide = function () {\n        this.isVisible = false; // TODO: Schedule render\n      };\n\n      ProjectionNode.prototype.show = function () {\n        this.isVisible = true; // TODO: Schedule render\n      };\n\n      ProjectionNode.prototype.scheduleRender = function (notifyAll) {\n        var _a, _b, _c;\n\n        if (notifyAll === void 0) {\n          notifyAll = true;\n        }\n\n        (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n        notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      };\n\n      ProjectionNode.prototype.setAnimationOrigin = function (delta, hasOnlyRelativeTargetChanged) {\n        var _this = this;\n\n        var _a;\n\n        if (hasOnlyRelativeTargetChanged === void 0) {\n          hasOnlyRelativeTargetChanged = false;\n        }\n\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n\n        var mixedValues = __assign({}, this.latestValues);\n\n        var targetDelta = createDelta();\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n        var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n\n        this.mixTargetDelta = function (latest) {\n          var _a;\n\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n\n          _this.setTargetDelta(targetDelta);\n\n          if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n            calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n            mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n          }\n\n          if (isSharedLayoutAnimation) {\n            _this.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n\n          _this.root.scheduleUpdateProjection();\n\n          _this.scheduleRender();\n        };\n\n        this.mixTargetDelta(0);\n      };\n\n      ProjectionNode.prototype.startAnimation = function (options) {\n        var _this = this;\n\n        var _a, _b;\n\n        (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n\n        if (this.resumingFrom) {\n          (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n\n        if (this.pendingAnimation) {\n          cancelSync.update(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n\n\n        this.pendingAnimation = sync.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this.currentAnimation = animate(0, animationTarget, __assign(__assign({}, options), {\n            onUpdate: function onUpdate(latest) {\n              var _a;\n\n              _this.mixTargetDelta(latest);\n\n              (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n            },\n            onComplete: function onComplete() {\n              var _a;\n\n              (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n\n              _this.completeAnimation();\n            }\n          }));\n\n          if (_this.resumingFrom) {\n            _this.resumingFrom.currentAnimation = _this.currentAnimation;\n          }\n\n          _this.pendingAnimation = undefined;\n        });\n      };\n\n      ProjectionNode.prototype.completeAnimation = function () {\n        var _a;\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      };\n\n      ProjectionNode.prototype.finishAnimation = function () {\n        var _a;\n\n        if (this.currentAnimation) {\n          (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n          this.currentAnimation.stop();\n        }\n\n        this.completeAnimation();\n      };\n\n      ProjectionNode.prototype.applyTransformsToTarget = function () {\n        var _a = this.getLead(),\n            targetWithTransforms = _a.targetWithTransforms,\n            target = _a.target,\n            layout = _a.layout,\n            latestValues = _a.latestValues;\n\n        if (!targetWithTransforms || !target || !layout) return;\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its actual layout\n         * into the desired bounding box.\n         */\n\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      };\n\n      ProjectionNode.prototype.registerSharedNode = function (layoutId, node) {\n        var _a, _b, _c;\n\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        node.promote({\n          transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n          preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n        });\n      };\n\n      ProjectionNode.prototype.isLead = function () {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      };\n\n      ProjectionNode.prototype.getLead = function () {\n        var _a;\n\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      };\n\n      ProjectionNode.prototype.getPrevLead = function () {\n        var _a;\n\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      };\n\n      ProjectionNode.prototype.getStack = function () {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      };\n\n      ProjectionNode.prototype.promote = function (_a) {\n        var _b = _a === void 0 ? {} : _a,\n            needsReset = _b.needsReset,\n            transition = _b.transition,\n            preserveFollowOpacity = _b.preserveFollowOpacity;\n\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      };\n\n      ProjectionNode.prototype.relegate = function () {\n        var stack = this.getStack();\n\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      };\n\n      ProjectionNode.prototype.resetRotation = function () {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return; // If there's no detected rotation values, we can early return without a forced render.\n\n        var hasRotate = false; // Keep a record of all the values we've reset\n\n        var resetValues = {}; // Check the rotate value of all axes and reset to 0\n\n        for (var i = 0; i < transformAxes.length; i++) {\n          var axis = transformAxes[i];\n          var key = \"rotate\" + axis; // If this rotation doesn't exist as a motion value, then we don't\n          // need to reset it\n\n          if (!visualElement.getStaticValue(key)) {\n            continue;\n          }\n\n          hasRotate = true; // Record the rotation and then temporarily set it to 0\n\n          resetValues[key] = visualElement.getStaticValue(key);\n          visualElement.setStaticValue(key, 0);\n        } // If there's no rotation values, we don't need to do any more.\n\n\n        if (!hasRotate) return; // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n\n        visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender(); // Put back all the values we reset\n\n        for (var key in resetValues) {\n          visualElement.setStaticValue(key, resetValues[key]);\n        } // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n\n\n        visualElement.scheduleRender();\n      };\n\n      ProjectionNode.prototype.getProjectionStyles = function (styleProp) {\n        var _a, _b, _c, _d, _e, _f;\n\n        if (styleProp === void 0) {\n          styleProp = {};\n        } // TODO: Return lifecycle-persistent object\n\n\n        var styles = {};\n        if (!this.instance || this.isSVG) return styles;\n\n        if (!this.isVisible) {\n          return {\n            visibility: \"hidden\"\n          };\n        } else {\n          styles.visibility = \"\";\n        }\n\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n\n        var lead = this.getLead();\n\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n\n          if (this.options.layoutId) {\n            emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          }\n\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n\n          return emptyStyles;\n        }\n\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n\n        var _g = this.projectionDelta,\n            x = _g.x,\n            y = _g.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its actual\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n\n\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _h = scaleCorrectors[key],\n              correct = _h.correct,\n              applyTo = _h.applyTo;\n          var corrected = correct(valuesToRender[key], lead);\n\n          if (applyTo) {\n            var num = applyTo.length;\n\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n\n\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n        }\n\n        return styles;\n      };\n\n      ProjectionNode.prototype.clearSnapshot = function () {\n        this.resumeFrom = this.snapshot = undefined;\n      }; // Only run on root\n\n\n      ProjectionNode.prototype.resetTree = function () {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      };\n\n      return ProjectionNode;\n    }()\n  );\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c, _d;\n\n  var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _e = node.layout,\n        layout_1 = _e.actual,\n        measuredLayout = _e.measured; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (node.options.animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout_1[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (node.options.animationType === \"position\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(layout_1[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n    var visualDelta = createDelta();\n\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n    } else {\n      calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n    }\n\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      node.relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (node.relativeParent && !node.relativeParent.resumeFrom) {\n        var _f = node.relativeParent,\n            parentSnapshot = _f.snapshot,\n            parentLayout = _f.layout;\n\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout_1,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction resetTransformStyle(node) {\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetRotation(node) {\n  node.resetRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  var searchNode = node.root;\n\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\n\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nexport { createProjectionNode, globalProjectionState, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"names":["__spreadArray","__read","__assign","sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","transformAxes","FlatTree","resolveMotionValue","animationTarget","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","createProjectionNode","_a","attachResizeListener","defaultParent","measureScroll","resetTransform","ProjectionNode","id","latestValues","parent","_this","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","prototype","addEventListener","name","handler","has","set","get","add","notifyListeners","args","_i","arguments","subscriptionManager","notify","apply","hasListeners","node","mount","instance","SVGElement","tagName","_b","layoutId","layout","visualElement","getInstance","delete","unblockTimeout_1","resizeUnblockUpdate_1","clearTimeout","window","setTimeout","finishAnimation","registerSharedNode","_c","_d","_e","_f","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","startAnimation","onComplete","isLead","onExitComplete","call","unmount","willUpdate","remove","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","shouldNotifyListeners","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measured","measure","removeTransform","removeElementScroll","roundBox","alwaysMeasureLayout","prevLayout","actual","layoutCorrected","projectionDelta","notifyLayoutMeasure","layoutScroll","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","box","measureViewportBox","boxWithoutScroll","scroll_1","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","syncRender","getProjectionStyles","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","_g","transformOrigin","concat","origin","opacityExit","_h","correct","applyTo","corrected","num","resetTree","layout_1","measuredLayout","animationType","axisSnapshot","min","max","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["/Users/khuong/Desktop/ReactJS/framer-motion-3d-shapes-button/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { __spreadArray, __read, __assign } from 'tslib';\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nvar globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\nfunction createProjectionNode(_a) {\n    var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, resetTransform = _a.resetTransform;\n    return /** @class */ (function () {\n        function ProjectionNode(id, latestValues, parent) {\n            var _this = this;\n            if (latestValues === void 0) { latestValues = {}; }\n            if (parent === void 0) { parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent(); }\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to actually\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = function () {\n                if (_this.isUpdating) {\n                    _this.isUpdating = false;\n                    _this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = function () {\n                _this.nodes.forEach(resolveTargetDelta);\n                _this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            /**\n             * Animation\n             */\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.id = id;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            id && this.root.registerPotentialNode(id, this);\n            for (var i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        ProjectionNode.prototype.addEventListener = function (name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        };\n        ProjectionNode.prototype.notifyListeners = function (name) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));\n        };\n        ProjectionNode.prototype.hasListeners = function (name) {\n            return this.eventHandlers.has(name);\n        };\n        ProjectionNode.prototype.registerPotentialNode = function (id, node) {\n            this.potentialNodes.set(id, node);\n        };\n        /**\n         * Lifecycles\n         */\n        ProjectionNode.prototype.mount = function (instance, isLayoutDirty) {\n            var _this = this;\n            var _a;\n            if (isLayoutDirty === void 0) { isLayoutDirty = false; }\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            var _b = this.options, layoutId = _b.layoutId, layout = _b.layout, visualElement = _b.visualElement;\n            if (visualElement && !visualElement.getInstance()) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.id && this.root.potentialNodes.delete(this.id);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                var unblockTimeout_1;\n                var resizeUnblockUpdate_1 = function () {\n                    return (_this.root.updateBlockedByResize = false);\n                };\n                attachResizeListener(instance, function () {\n                    _this.root.updateBlockedByResize = true;\n                    clearTimeout(unblockTimeout_1);\n                    unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        _this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", function (_a) {\n                    var _b, _c, _d, _e, _f;\n                    var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged, hasRelativeTargetChanged = _a.hasRelativeTargetChanged, newLayout = _a.layout;\n                    if (_this.isTreeAnimationBlocked()) {\n                        _this.target = undefined;\n                        _this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n                    var onLayoutAnimationComplete = visualElement.getProps().onLayoutAnimationComplete;\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    var targetChanged = !_this.targetLayout ||\n                        !boxEquals(_this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !_this.currentAnimation))) {\n                        if (_this.resumeFrom) {\n                            _this.resumingFrom = _this.resumeFrom;\n                            _this.resumingFrom.resumingFrom = undefined;\n                        }\n                        _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        _this.startAnimation(__assign(__assign({}, getValueTransition(layoutTransition, \"layout\")), { onComplete: onLayoutAnimationComplete }));\n                    }\n                    else {\n                        _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n                    }\n                    _this.targetLayout = newLayout;\n                });\n            }\n        };\n        ProjectionNode.prototype.unmount = function () {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        };\n        // only on the root\n        ProjectionNode.prototype.blockUpdate = function () {\n            this.updateManuallyBlocked = true;\n        };\n        ProjectionNode.prototype.unblockUpdate = function () {\n            this.updateManuallyBlocked = false;\n        };\n        ProjectionNode.prototype.isUpdateBlocked = function () {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        };\n        ProjectionNode.prototype.isTreeAnimationBlocked = function () {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        };\n        // Note: currently only running on root node\n        ProjectionNode.prototype.startUpdate = function () {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        };\n        ProjectionNode.prototype.willUpdate = function (shouldNotifyListeners) {\n            var _a, _b, _c;\n            if (shouldNotifyListeners === void 0) { shouldNotifyListeners = true; }\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            var _d = this.options, layoutId = _d.layoutId, layout = _d.layout;\n            if (layoutId === undefined && !layout)\n                return;\n            var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        };\n        // Note: Currently only running on root node\n        ProjectionNode.prototype.didUpdate = function () {\n            var updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        };\n        ProjectionNode.prototype.clearAllSnapshots = function () {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        };\n        ProjectionNode.prototype.scheduleUpdateProjection = function () {\n            sync.preRender(this.updateProjection, false, true);\n        };\n        ProjectionNode.prototype.scheduleCheckAfterUnmount = function () {\n            var _this = this;\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(function () {\n                if (_this.isLayoutDirty) {\n                    _this.root.didUpdate();\n                }\n                else {\n                    _this.root.checkUpdateFailed();\n                }\n            });\n        };\n        /**\n         * Update measurements\n         */\n        ProjectionNode.prototype.updateSnapshot = function () {\n            if (this.snapshot || !this.instance)\n                return;\n            var measured = this.measure();\n            var layout = this.removeTransform(this.removeElementScroll(measured));\n            roundBox(layout);\n            this.snapshot = {\n                measured: measured,\n                layout: layout,\n                latestValues: {},\n            };\n        };\n        ProjectionNode.prototype.updateLayout = function () {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (var i = 0; i < this.path.length; i++) {\n                    var node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            var measured = this.measure();\n            roundBox(measured);\n            var prevLayout = this.layout;\n            this.layout = {\n                measured: measured,\n                actual: this.removeElementScroll(measured),\n            };\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.actual);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n        };\n        ProjectionNode.prototype.updateScroll = function () {\n            if (this.options.layoutScroll && this.instance) {\n                this.scroll = measureScroll(this.instance);\n            }\n        };\n        ProjectionNode.prototype.resetTransform = function () {\n            var _a;\n            if (!resetTransform)\n                return;\n            var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        };\n        ProjectionNode.prototype.measure = function () {\n            var visualElement = this.options.visualElement;\n            if (!visualElement)\n                return createBox();\n            var box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            var scroll = this.root.scroll;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        };\n        ProjectionNode.prototype.removeElementScroll = function (box) {\n            var boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                var scroll_1 = node.scroll, options = node.options;\n                if (node !== this.root && scroll_1 && options.layoutScroll) {\n                    translateAxis(boxWithoutScroll.x, scroll_1.x);\n                    translateAxis(boxWithoutScroll.y, scroll_1.y);\n                }\n            }\n            return boxWithoutScroll;\n        };\n        ProjectionNode.prototype.applyTransform = function (box, transformOnly) {\n            if (transformOnly === void 0) { transformOnly = false; }\n            var withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        };\n        ProjectionNode.prototype.removeTransform = function (box) {\n            var _a;\n            var boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                var sourceBox = createBox();\n                var nodeBox = node.measure();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        };\n        /**\n         *\n         */\n        ProjectionNode.prototype.setTargetDelta = function (delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        };\n        ProjectionNode.prototype.setOptions = function (options) {\n            var _a;\n            this.options = __assign(__assign(__assign({}, this.options), options), { crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true });\n        };\n        ProjectionNode.prototype.clearMeasurements = function () {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        };\n        /**\n         * Frame calculations\n         */\n        ProjectionNode.prototype.resolveTargetDelta = function () {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && this.relativeParent.layout) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.actual);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.actual);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.actual);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent &&\n                    Boolean(this.relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !this.relativeParent.options.layoutScroll &&\n                    this.relativeParent.target) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n        };\n        ProjectionNode.prototype.getClosestProjectingParent = function () {\n            if (!this.parent || hasTransform(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        };\n        ProjectionNode.prototype.calcProjection = function () {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            var lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.actual);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            var target = lead.target;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            var prevTreeScaleX = this.treeScale.x;\n            var prevTreeScaleY = this.treeScale.y;\n            var prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        };\n        ProjectionNode.prototype.hide = function () {\n            this.isVisible = false;\n            // TODO: Schedule render\n        };\n        ProjectionNode.prototype.show = function () {\n            this.isVisible = true;\n            // TODO: Schedule render\n        };\n        ProjectionNode.prototype.scheduleRender = function (notifyAll) {\n            var _a, _b, _c;\n            if (notifyAll === void 0) { notifyAll = true; }\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        };\n        ProjectionNode.prototype.setAnimationOrigin = function (delta, hasOnlyRelativeTargetChanged) {\n            var _this = this;\n            var _a;\n            if (hasOnlyRelativeTargetChanged === void 0) { hasOnlyRelativeTargetChanged = false; }\n            var snapshot = this.snapshot;\n            var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            var mixedValues = __assign({}, this.latestValues);\n            var targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            var relativeLayout = createBox();\n            var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.mixTargetDelta = function (latest) {\n                var _a;\n                var progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                _this.setTargetDelta(targetDelta);\n                if (_this.relativeTarget &&\n                    _this.relativeTargetOrigin &&\n                    _this.layout &&\n                    ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n                    mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    _this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                _this.root.scheduleUpdateProjection();\n                _this.scheduleRender();\n            };\n            this.mixTargetDelta(0);\n        };\n        ProjectionNode.prototype.startAnimation = function (options) {\n            var _this = this;\n            var _a, _b;\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(function () {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                _this.currentAnimation = animate(0, animationTarget, __assign(__assign({}, options), { onUpdate: function (latest) {\n                        var _a;\n                        _this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    }, onComplete: function () {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        _this.completeAnimation();\n                    } }));\n                if (_this.resumingFrom) {\n                    _this.resumingFrom.currentAnimation = _this.currentAnimation;\n                }\n                _this.pendingAnimation = undefined;\n            });\n        };\n        ProjectionNode.prototype.completeAnimation = function () {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        };\n        ProjectionNode.prototype.finishAnimation = function () {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        };\n        ProjectionNode.prototype.applyTransformsToTarget = function () {\n            var _a = this.getLead(), targetWithTransforms = _a.targetWithTransforms, target = _a.target, layout = _a.layout, latestValues = _a.latestValues;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its actual layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        };\n        ProjectionNode.prototype.registerSharedNode = function (layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            var stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        };\n        ProjectionNode.prototype.isLead = function () {\n            var stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        };\n        ProjectionNode.prototype.getLead = function () {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        };\n        ProjectionNode.prototype.getPrevLead = function () {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        };\n        ProjectionNode.prototype.getStack = function () {\n            var layoutId = this.options.layoutId;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        };\n        ProjectionNode.prototype.promote = function (_a) {\n            var _b = _a === void 0 ? {} : _a, needsReset = _b.needsReset, transition = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;\n            var stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition: transition });\n        };\n        ProjectionNode.prototype.relegate = function () {\n            var stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        };\n        ProjectionNode.prototype.resetRotation = function () {\n            var visualElement = this.options.visualElement;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            var hasRotate = false;\n            // Keep a record of all the values we've reset\n            var resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (var i = 0; i < transformAxes.length; i++) {\n                var axis = transformAxes[i];\n                var key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n            // Put back all the values we reset\n            for (var key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        };\n        ProjectionNode.prototype.getProjectionStyles = function (styleProp) {\n            var _a, _b, _c, _d, _e, _f;\n            if (styleProp === void 0) { styleProp = {}; }\n            // TODO: Return lifecycle-persistent object\n            var styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            var lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                var emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            var valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            var _g = this.projectionDelta, x = _g.x, y = _g.y;\n            styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its actual\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\"\n                        : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (var key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;\n                var corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    var num = applyTo.length;\n                    for (var i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        };\n        ProjectionNode.prototype.clearSnapshot = function () {\n            this.resumeFrom = this.snapshot = undefined;\n        };\n        // Only run on root\n        ProjectionNode.prototype.resetTree = function () {\n            this.root.nodes.forEach(function (node) { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        };\n        return ProjectionNode;\n    }());\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c, _d;\n    var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        var _e = node.layout, layout_1 = _e.actual, measuredLayout = _e.measured;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (node.options.animationType === \"size\") {\n            eachAxis(function (axis) {\n                var axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                var length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout_1[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (node.options.animationType === \"position\") {\n            eachAxis(function (axis) {\n                var axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                var length = calcLength(layout_1[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        var layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n        var visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n        }\n        var hasLayoutChanged = !isDeltaZero(layoutDelta);\n        var hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            node.relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (node.relativeParent && !node.relativeParent.resumeFrom) {\n                var _f = node.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;\n                if (parentSnapshot && parentLayout) {\n                    var relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n                    var relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout: layout_1,\n            snapshot: snapshot,\n            delta: visualDelta,\n            layoutDelta: layoutDelta,\n            hasLayoutChanged: hasLayoutChanged,\n            hasRelativeTargetChanged: hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    var searchNode = node.root;\n    for (var i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\n\nexport { createProjectionNode, globalProjectionState, mixAxis, mixAxisDelta, mixBox };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}